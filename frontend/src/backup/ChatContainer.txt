"use client";

import React, { useState, useContext, useEffect } from "react";
import { WebsocketContext } from "@/contexts/WebsocketContext";
import { ChatInput } from "./ui/chat/chat-input";
import { ChatMessageList } from "./ui/chat/chat-message-list";
import { BsFillArrowRightCircleFill } from "react-icons/bs";
import { ChatBubble, ChatBubbleMessage } from "./ui/chat/chat-bubble";

type MessagePayload = {
  fromUserID: number | null;
  content: string[];
  fromSelf: boolean;
};

type Contact = {
  userID: number;
  username: string;
};

interface ChatContainerProps {
  selected: Contact | null;
}

const ChatContainer: React.FC<ChatContainerProps> = ({ selected }) => {
  const [newMessage, setNewMessage] = useState("");
  const [history, setHistory] = useState<MessagePayload[]>([]);
  const [index, setIndex] = useState<number>();
  const socket = useContext(WebsocketContext);

  useEffect(() => {
    socket.on("onMessage", (newMessage: MessagePayload) => {
      for (let i = 0; i < history.length; i++) {
        const user = history[i];
        if (user.fromUserID === selected?.userID) {
          user.content.push(newMessage.content[0]);
          break;
        }
        // Insert New Chat History
        setHistory((prev) => [
          ...prev,
          {
            fromUserID: selected!.userID, // Non-null assertion operator : 99% certarin the value cannot be null
            content: [newMessage.content[0]],
            fromSelf: true,
          },
        ]);
      }
      if (history.length === 0) {
        setHistory((prev) => [
          ...prev,
          {
            fromUserID: selected!.userID, // Non-null assertion operator : 99% certarin the value cannot be null
            content: [newMessage.content[0]],
            fromSelf: true,
          },
        ]);
      }
    });
    return () => {
      socket.off("onMessage");
    };
  }, []);

  useEffect(() => {
    for (let i = 0; i < history.length; i++) {
      const user = history[i];
      if (user.fromUserID === selected?.userID) {
        user.content.push(newMessage);
        break;
      }
    }
  }, [selected]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    socket.emit("newMessage", newMessage, selected);
    setNewMessage("");
    findContact();
  };

  const findContact = () => {
    for (let i = 0; i < history.length; i++) {
      const user = history[i];
      if (user.fromUserID === selected?.userID) {
        user.content.push(newMessage);
        break;
      }
      // Insert New Chat History
      setHistory((prev) => [
        ...prev,
        {
          fromUserID: selected!.userID, // Non-null assertion operator : 99% certarin the value cannot be null
          content: [newMessage],
          fromSelf: true,
        },
      ]);
    }
    if (history.length === 0) {
      setHistory((prev) => [
        ...prev,
        {
          fromUserID: selected!.userID, // Non-null assertion operator : 99% certarin the value cannot be null
          content: [newMessage],
          fromSelf: true,
        },
      ]);
    }
  };

  return (
    <div className="flex flex-col h-screen w-3/4 min-w-96 bg-stone-100">
      {selected ? (
        <>
          <div className="w-full p-2 bg-white shadow-sm">
            {selected.username} {selected.userID}
          </div>

          <ChatMessageList>
            {history.length === 0 ? (
              <div className="text-center text-lg font-bold">
                New Conversation
              </div>
            ) : (
              <>
                {history.map((msg) => (
                  <>
                    {msg.fromSelf ? (
                      <ChatBubble variant="sent">
                        <ChatBubbleMessage variant="sent">
                          <p>{msg.content}</p>
                        </ChatBubbleMessage>
                      </ChatBubble>
                    ) : (
                      <ChatBubble variant="received">
                        <ChatBubbleMessage variant="received">
                          <p>{msg.content}</p>
                        </ChatBubbleMessage>
                      </ChatBubble>
                    )}
                  </>
                ))}
              </>
            )}
          </ChatMessageList>
          <form className="rounded-lg" onSubmit={(e) => handleSubmit(e)}>
            <div className="px-4 pb-4 flex relative">
              <ChatInput
                placeholder="Type your message here..."
                className="z-0 border-0"
                value={newMessage}
                onChange={(e) => setNewMessage(e.target.value)}
                onKeyDown={(e) => (e.key === "Enter" ? handleSubmit(e) : null)}
              ></ChatInput>
              <div className="absolute right-5 top-[0.6rem]">
                <button type="submit" className="bg-white">
                  <BsFillArrowRightCircleFill
                    size={38}
                    color="black"
                    className="z-50"
                  />
                </button>
              </div>

              {/* <div className="flex items-center p-3 pt-0"></div> */}
            </div>
          </form>
        </>
      ) : (
        <></>
      )}
    </div>
  );
};

export default ChatContainer;
